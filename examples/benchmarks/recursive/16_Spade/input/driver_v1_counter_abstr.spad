(** Bluetooth driver.
 *)

Ops
(** Operators. **)
  seq:2 par:2 idle:0

(** process Counter **)
  one:0 zero:0

(** process Stopping_flag **)
  false_stop_flag:0 true_stop_flag:0

(** process Stopping_event **)
  false_stop_event:0 true_stop_event:0

(** process Stop_d **)
  n0:0 n1:0 Release_ressources:0

(** process Request **)
  e:0 n:0 Work:0 End_Work:0 ABORT:0

(** procedure Increment **)
  Increment:0 r_1:0 ni:0 r0:0

(** procedure Decrement **)
  Decrement:0 nii:0 niii:0


Acts
  incr decr notzero iszero stop isstop nonstop
  is_stopped not_stopped

SPAD

(* process Counter *)
(* abstraction of the counter *)
one  -> one : incr?
zero -> one : incr?
one  -> zero : decr?
one  -> one : decr?
one  -> one  : notzero!
zero -> zero : iszero!


(* process Stopping_flag *)

false_stop_flag -> true_stop_flag : stop?
true_stop_flag  -> true_stop_flag : isstop!
false_stop_flag -> false_stop_flag : nonstop!


(* process Stopping_event *)

false_stop_event -> true_stop_event : is_stopped!
true_stop_event -> true_stop_event : is_stopped!
false_stop_event -> false_stop_event : not_stopped!


(* process Stop_d *)

n0 -> seq(Decrement , n1) : stop!
n1 -> Release_ressources : is_stopped?



(* process Request *)

e -> seq(Increment , n) : Tau
seq(r0 , n) -> seq(Work , End_Work) : Tau
Work -> idle : Tau
End_Work -> Decrement : not_stopped?
End_Work -> ABORT : is_stopped?


(* function Increment *)

Increment -> r_1 : stop?
Increment -> ni : not_stopped?
ni -> r0 : incr!


(* function Decrement *)

Decrement -> nii : decr!
nii -> idle : notzero?
nii -> niii : iszero?
niii -> idle : is_stopped?
 

Set init
  par(one, par(false_stop_flag, par(false_stop_event, par(n0, e))))


Set bad
  par(one, par(true_stop_flag, par(true_stop_event, par(Release_ressources, ABORT))))

